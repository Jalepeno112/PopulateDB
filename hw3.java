/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.sql.*;
import org.json.simple.*;

/**
 *
 * @author gbriggs
 */
public class hw3 extends javax.swing.JFrame {
    private java.util.List <javax.swing.JCheckBox> genres = new java.util.ArrayList<>();
    private java.util.List <javax.swing.JCheckBox> countries = new java.util.ArrayList<>();

    private javax.swing.JCheckBox[] jCheckboxArray;

    /**
     * Creates new form hw3
     */

    public hw3() {
        initComponents();
        getGenres();
        getCountries();
    }

        private void getGenres(){
        try{
            Connection con = openConnection();
            Statement stmt = con.createStatement();
            // remove values from table
            ResultSet rs = stmt.executeQuery("SELECT DISTINCT genre FROM movie_genres ORDER BY genre");
            int i = 0;
            while (rs.next()) {
                javax.swing.JCheckBox box = new javax.swing.JCheckBox(rs.getString("genre"));
               // box.setVisible(true);
                System.out.println(box);
                genres.add(box);
                jPanel1.add(box);
                i++;
            }
            closeConnection(con);
        }catch(SQLException ex){System.err.println(ex);}
        catch(ClassNotFoundException ex){
            System.err.println(ex);
        }
        pack();  // this will tell the JFrame's panel to layout all the components
      }


    private void getCountries(){
        try{
            Connection con = openConnection();
            Statement stmt = con.createStatement();
            // remove values from table
            ResultSet rs = stmt.executeQuery("SELECT DISTINCT country FROM movie_countries ORDER BY country");
            int i = 0;
            while (rs.next()) {
                javax.swing.JCheckBox box = new javax.swing.JCheckBox(rs.getString("country"));
               // box.setVisible(true);
                System.out.println(box);
                countries.add(box);
                jPanel2.add(countries.get(i));
                i++;
            }
            closeConnection(con);
        }catch(SQLException ex){System.err.println(ex);}
        catch(ClassNotFoundException ex){
            System.err.println(ex);
        }
        pack();  // this will tell the JFrame's panel to layout all the components
      }


    /**
    *
    * @return a database connection
    * @throws SQLException when there is an error when trying to connect database
    * @throws ClassNotFoundException when the database driver is not found.
    */
    private Connection openConnection() throws SQLException, ClassNotFoundException {
            // Load the Oracle database driver
            System.out.println("openConnection");
            System.out.println("Registering Driver");

            //System.out.println(oracle.jdbc.OracleDriver);

            DriverManager.registerDriver(new oracle.jdbc.OracleDriver());

            /*
            Here is the information needed when connecting to a database
            server. These values are now hard-coded in the program. In
            general, they should be stored in some configuration file and
            read at run time.
            */
            String host = "localhost";
            String port = "1521";
            String dbName = "orcl";
            String userName = "SYSTEM";
            String password = "admin";
             // https://localhost:1158/em

            // Construct the JDBC URL
            String dbURL = "jdbc:oracle:thin:@" + host + ":" + port + ":" + dbName;

            System.out.println("Attempting connection!");
            return DriverManager.getConnection(dbURL, userName, password);
    }

    /**
    * Close the database connection
    * @param con
    */
    private void closeConnection(Connection con) {
            try {
               con.close();
               System.out.println("Connection closed");
            } catch (SQLException e) {
               System.err.println("Cannot close connection: " + e.getMessage());
            }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jTextField5 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        choice1 = new java.awt.Choice();
        choice1.add("=");
        choice1.add("<");
        choice1.add(">");
        choice1.add("<=");
        choice1.add(">=");
        choice2 = new java.awt.Choice();
        choice2.add("=");
        choice2.add("<");
        choice2.add(">");
        choice2.add("<=");
        choice2.add(">=");
        jPanel5 = new javax.swing.JPanel();
        jTextField7 = new javax.swing.JTextField();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jXDatePicker2 = new org.jdesktop.swingx.JXDatePicker();
        jTextField8 = new javax.swing.JTextField();
        choice3 = new java.awt.Choice();
        choice3.add("=");
        choice3.add("<");
        choice3.add(">");
        choice3.add("<=");
        choice3.add(">=");
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jXDatePicker3 = new org.jdesktop.swingx.JXDatePicker();
        jLabel13 = new javax.swing.JLabel();
        jXDatePicker4 = new org.jdesktop.swingx.JXDatePicker();
        choice4 = new java.awt.Choice();
        choice4.add("AND");
        choice4.add("OR");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Execute Query");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane8.setViewportView(jTextArea3);

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane9.setViewportView(jTextArea4);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cast"));

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel8.setText("Actors");

        jLabel9.setText("Director");

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ratings")));

        jLabel10.setText("Rating");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel11.setText("Number of Ratings");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(choice1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(107, 107, 107)
                                .addComponent(choice2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(choice2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "User"));

        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        jLabel1.setText("User ID");

        jLabel2.setText("From");

        jLabel3.setText("To");

        jLabel4.setText("Rating");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel1)
                        .addGap(9, 9, 9)
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(10, 10, 10)
                                .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(6, 6, 6)
                                .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(choice3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(16, 16, 16)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addComponent(choice3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Genres"));
        jPanel1.setLayout(new org.jdesktop.swingx.VerticalLayout());
        jScrollPane1.setViewportView(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Country"));
        jPanel2.setLayout(new org.jdesktop.swingx.VerticalLayout());
        jScrollPane3.setViewportView(jPanel2);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "Year"));

        jLabel12.setText("From");

        jLabel13.setText("To");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jXDatePicker4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXDatePicker3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jXDatePicker3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXDatePicker4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(choice4, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane9))
                        .addGap(123, 123, 123))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(17, 17, 17)
                        .addComponent(choice4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane8)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)))
                .addGap(152, 152, 152))
        );

        pack();
    }// </editor-fold>

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        System.out.println("EVENT: " + evt);

        //String query = "SELECT DISTINCT * FROM movie_view ";
        //String query = "SELECT DISTINCT * FROM (\n";
        String logic_operator = choice4.getSelectedItem() + " ";
        // jTextArea4 is the result box
        // jTextArea3 is the query box
        // clear any text that is already in them
        jTextArea3.setText("");
        jTextArea4.setText("");

        String movie_filter = "";
        // get selected countries
        //String countries_query = "SELECT * FROM movie_countries \n";
        String countries_filter = "";

        for (int i = 0; i < countries.size(); i++) {
            if (countries.get(i).isSelected()) {
                if (!countries_filter.equals("")) countries_filter+=logic_operator;
                countries_filter += "country = '" + countries.get(i).getText() +"' ";
            }
        }
        if (!countries_filter.equals("")) {
            //countries_query += "WHERE " + countries_filter +"\n";
            if(!movie_filter.equals("")) movie_filter += logic_operator;
            movie_filter += countries_filter;
        }

        // get selected genres
        String genres_filter = "";
        //String genres_query = "SELECT * FROM genre_list\n";
        for (int i =0 ;i < genres.size(); i++) {
             if (genres.get(i).isSelected()) {
                if (!genres_filter.equals("")) genres_filter+=logic_operator;
                genres_filter += "movie_genres LIKE '%" + genres.get(i).getText() +"%' ";
            }
        }
        if (!genres_filter.equals("")) {
         //   genres_query += "WHERE " + genres_filter +"\n";
            if(!movie_filter.equals("")) movie_filter += logic_operator;
            movie_filter += genres_filter;
        }

        // get searched actors
        // jTextField2 and jTextField3 are the actor search fields
        String actor1 = jTextField2.getText();
        String actor2 = jTextField3.getText();
        String actor_filter = "";
        //String actor_query = "SELECT * FROM movie_actors\n";
        if (!actor1.equals("")) {
            actor_filter += "actor_name = '"+ actor1 +"' ";
        }
        if (!actor2.equals("")) {
            if (!actor_filter.equals("")) actor_filter += logic_operator;
            actor_filter += "actor_name = '" + actor2 +"' ";
        }
        if (!actor_filter.equals("")) {
            //actor_query += "WHERE " + actor_filter + "\n";
            if(!movie_filter.equals("")) movie_filter += logic_operator;
            movie_filter += actor_filter;
        }

        /*director query*/
        //String director_query = "SELECT * FROM movie_directors\n";
        String director = jTextField4.getText();
        String director_filter = "";
        if (!director.equals("")) {
             director_filter = "director_name = '" + director +"' ";
            //director_query += "WHERE " + director_filter +"\n";
            if(!movie_filter.equals("")) movie_filter += logic_operator;
            movie_filter += director_filter;
        }
        String rating_inequality = choice1.getSelectedItem();
        String num_rating_inequality = choice2.getSelectedItem();
        String rating = jTextField5.getText();
        String num_rating = jTextField6.getText();
        //String movie_query = "SELECT * FROM sub_movies\n";
        String movie_rating_filter = "";
        if (!rating.equals("")) {
            movie_rating_filter += "average_rating " + rating_inequality + " " + rating + " ";
        }

        if (!num_rating.equals("")) {
            if(!movie_rating_filter.equals("")) movie_rating_filter += logic_operator;
            movie_rating_filter+= "num_ratings " + num_rating_inequality + " " + num_rating + " ";
        }

        /* movie year filter*/
        java.util.Date movie_year_date_from = jXDatePicker3.getDate();
        if (movie_year_date_from != null) {
            //float movie_year_date_from_unix = movie_year_date_from.getTime()/1000;
            java.util.Calendar calendar = new java.util.GregorianCalendar();
            calendar.setTime(movie_year_date_from);
            int year = calendar.get(java.util.Calendar.YEAR);
            //if(!movie_filter.equals("")) movie_filter += logic_operator;
            movie_rating_filter += "movie_year >= '" + year +"' ";
        }

        java.util.Date movie_year_date_to = jXDatePicker4.getDate();
         if (movie_year_date_to != null) {
            //float movie_year_date_from_unix = movie_year_date_from.getTime()/1000;
            java.util.Calendar calendar = new java.util.GregorianCalendar();
            calendar.setTime(movie_year_date_to);
            int year = calendar.get(java.util.Calendar.YEAR);

            // we always and between year to establish a time window
            if(!movie_rating_filter.equals("")) movie_rating_filter += "AND ";
            else if(!movie_filter.equals("")) movie_filter += logic_operator;
            movie_rating_filter += "movie_year <= '" + year + "' ";
        }

        // always include the time range as an AND
        // it doesn't make sense to say, "Select all movies with genre Action or were released in this time range"
        if (!movie_rating_filter.equals("")){
            if(!movie_filter.equals("")) movie_filter = "("+movie_filter +")" + "AND ";
            movie_filter += "("+movie_rating_filter+") ";
        }

        String movie_query = "SELECT * FROM movie_view\n";
        if (!movie_filter.equals("")) {
            movie_query += "WHERE " + movie_filter +"\n";
        }
         /*  if at least one of the user_filters is not null,
            then we need to use the view that joins the user_ratings
            Otherwise, we don't care.
            The user_ratings table is so large that it causes problems
            And the info in it doesn't add anything unless requested
        */
        /*user filters*/
        String user_id = jTextField7.getText();
        java.util.Date user_rating_date_from = jXDatePicker1.getDate();
        java.util.Date user_rating_date_to = jXDatePicker2.getDate();
        String user_rating = jTextField8.getText();
        String user_rating_inequality = choice3.getSelectedItem();

        String rating_filter = "";
        String user_rating_query = "SELECT DISTINCT user_ratedmovies_timestamps.userid as userid,\n"
                + "user_ratedmovies_timestamps.rating as rating,\n"
                + "user_ratedmovies_timestamps.timestamp as timestamp,\n"
                + "user_ratedmovies_timestamps.movieid as movieid,\n"
                + "tags.value as tags\n"
                + "FROM user_ratedmovies_timestamps, "
                + "user_taggedmovies_timestamps, tags\n"
                + "WHERE user_taggedmovies_timestamps.userid = user_ratedmovies_timestamps.userid\n"
                + "AND tags.id = user_taggedmovies_timestamps.tagid\n"
                + "AND user_taggedmovies_timestamps.movieid = user_ratedmovies_timestamps.movieid\n";
        if (!user_id.equals("")) {
            rating_filter += "user_ratedmovies_timestamps.userid = '" + user_id +"' ";
        }

        if (user_rating_date_from != null) {
            if (!rating_filter.equals("")) rating_filter += logic_operator;
            rating_filter += "user_ratedmovies_timestamps.timestamp >= "
                    + user_rating_date_from.getTime() + " ";
        }
        if (user_rating_date_to != null) {
            if (user_rating_date_from != null) rating_filter += "AND ";
            else if (!rating_filter.equals("")) rating_filter += logic_operator;

            rating_filter += "user_ratedmovies_timestamps.timestamp <= "
                    + user_rating_date_to.getTime()+ " ";
        }

        if (!user_rating.equals("")) {
            if (!rating_filter.equals("")) rating_filter += logic_operator;

            rating_filter += "rating " + user_rating_inequality +" " + user_rating + " ";
        }

        if (!rating_filter.equals("")) {
            user_rating_query += "AND " + rating_filter +"\n";
        }

        /*build the entire query*/
        String query = movie_query +")movies";
        if (!rating_filter.equals("")) {
            query +="\nINNER JOIN (\n   "
                + user_rating_query +")user_rating\n"
            + "ON user_rating.movieid = movies.movie_id";
        }

        /*
            need to wrap this query in another select so that we only grab
            the columns that we need
        */
        String select = "SELECT DISTINCT\n"
                + "movies.movie_id as movie_id,\n"
                + "movies.movie_title as movie_title,\n"
                + "movies.actor_name as actor_name,\n"
                + "movies.director_name as director_name,\n"
                + "movies.movie_year as movie_year,"
                + "movies.average_rating as average_rating,\n"
                + "movies.num_ratings as num_ratings,\n"
                + "movies.movie_genres as movie_genres "
                ;
        if (!rating_filter.equals("")) {
            select += ",\nuser_rating.userid as user_id,\n"
                    + "user_rating.rating as user_rating,\n"
                    + "user_rating.timestamp as timestamp,\n"
                    + "user_rating.tags as tags\n";
        }
        query = select + "FROM (\n" + query
                + "\nORDER BY movie_title";

        jTextArea3.setText(query);
        //pack();
        try {
            Connection con = openConnection();
            Statement stmt = con.createStatement();
            // remove values from table
            System.out.println("Making query: "+ query);
            ResultSet rs = stmt.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnsNumber = rsmd.getColumnCount();

            // print the columns out
            String columnTitles = "";
            for (int i = 1; i <=columnsNumber; i++) {
                if (i> 1) {columnTitles+="; ";}
                columnTitles += rsmd.getColumnName(i);
            }
            jTextArea4.setText(columnTitles +"\n");

            System.out.println("Parsing results with columns: "+ columnsNumber);
            boolean foundData = false;
            while (rs.next()){
                String row = "";
                for (int i = 1; i <= columnsNumber; i++) {
                    if (i > 1) {row+=";  ";}
                    //System.out.println("Constructing row");
                    String columnValue = rs.getString(i);
                    row = row + columnValue;
                    //System.out.println(i + ": " + row);
                    foundData = true;
                }
                jTextArea4.append(row+"\n");
            }
            if (!foundData) {
                jTextArea4.append("No results found");
            }
            closeConnection(con);

        }catch (SQLException ex){System.err.println(ex);}
        catch(ClassNotFoundException ex){System.err.println(ex);}

    }

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hw3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private java.awt.Choice choice1;
    private java.awt.Choice choice2;
    private java.awt.Choice choice3;
    private java.awt.Choice choice4;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker2;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker3;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker4;
    // End of variables declaration
}
